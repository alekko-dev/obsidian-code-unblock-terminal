name: Build and Release

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

permissions:
  contents: write

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: Build plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build

      - name: Locate manifest
        id: manifest
        run: |
          set -euo pipefail
          MANIFEST=""
          for path in manifest.json dist/manifest.json build/manifest.json; do
            if [ -f "$path" ]; then
              MANIFEST="$path"
              break
            fi
          done

          if [ -z "$MANIFEST" ]; then
            echo "Could not find manifest.json after build." >&2
            exit 1
          fi

          DIR=$(dirname "$MANIFEST")
          ID=$(jq -r '.id // empty' "$MANIFEST")
          VERSION=$(jq -r '.version // empty' "$MANIFEST")

          if [ -z "$ID" ] || [ "$ID" = "null" ]; then
            ID=$(basename "$GITHUB_REPOSITORY")
          fi

          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "manifest.json must contain a semantic version." >&2
            exit 1
          fi

          echo "manifest_path=$MANIFEST" >> "$GITHUB_OUTPUT"
          echo "manifest_dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "plugin_id=$ID" >> "$GITHUB_OUTPUT"
          echo "plugin_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Package plugin
        id: package
        run: |
          set -euo pipefail
          SOURCE="${{ steps.manifest.outputs.manifest_dir }}"
          PLUGIN_ID="${{ steps.manifest.outputs.plugin_id }}"
          VERSION="${{ steps.manifest.outputs.plugin_version }}"

          mkdir -p release/"$PLUGIN_ID"

          cp "$SOURCE/manifest.json" release/"$PLUGIN_ID"/

          MAIN_SOURCE="$SOURCE/main.js"
          if [ ! -f "$MAIN_SOURCE" ] && [ -f main.js ]; then
            MAIN_SOURCE="main.js"
          fi
          if [ ! -f "$MAIN_SOURCE" ]; then
            echo "Unable to find main.js in build output." >&2
            exit 1
          fi
          cp "$MAIN_SOURCE" release/"$PLUGIN_ID"/

          for OPTIONAL in styles.css versions.json README.md LICENSE; do
            if [ -f "$SOURCE/$OPTIONAL" ]; then
              cp "$SOURCE/$OPTIONAL" release/"$PLUGIN_ID"/
            elif [ -f "$OPTIONAL" ]; then
              cp "$OPTIONAL" release/"$PLUGIN_ID"/
            fi
          done

          ZIP_NAME="$PLUGIN_ID-v$VERSION.zip"
          (cd release && zip -r "$ZIP_NAME" "$PLUGIN_ID")
          echo "zip_path=release/$ZIP_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.manifest.outputs.plugin_id }}-v${{ steps.manifest.outputs.plugin_version }}
          path: ${{ steps.package.outputs.zip_path }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.manifest.outputs.plugin_version }}
          name: ${{ steps.manifest.outputs.plugin_id }} v${{ steps.manifest.outputs.plugin_version }}
          files: ${{ steps.package.outputs.zip_path }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
